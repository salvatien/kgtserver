 @using kgtwebClient.Helpers;
@{
    ViewBag.Title = "Index";
}

@using Dogs.ViewModels.Data.Models;
@model List<Dogs.ViewModels.Data.Models.TrainingModel>


@{
    ViewBag.Title = "Trainings";
}


<div class="tables">
    <input type="text" id="trainingsSearch" onkeyup="searchByLocationOrDate()" placeholder="Search for location/date" title="Type in location or date">
    @{ if(LoginHelper.IsAuthenticated()) { 
            <button class="addButton" onclick="location.href='@Url.Action("AddTraining", "Trainings")'">Dodaj Trening</button>
        }
    }
            <div>
                @if (Model == null || !Model.Any())
                {
                    <h4> Nie dodano jeszcze żadnego treningu </h4>
                }
                else
                {
                    <h5> Kliknij na nazwę kolumny, aby posortować względem niej.</h5>
                    <h6> Kliknij kolejny raz, aby zmienić porządek sortowania.</h6>
                    <table id="trainingsTable">
                        <tr>
                            <th onclick="sortTable(0, false)">ID</th>
                            <th onclick="sortTable(1, false)">Lokacja</th>
                            <th onclick="sortTable(2, false)">Adres</th>
                            <th onclick="sortTable(3, true)">Data</th>


                        </tr>
                        @foreach (var item in Model)

                        {
                            <tr @*onclick="document.location = 'http://kgtwebclient.azurewebsites.net/Dogs/Dog/' + @item.DogId;"  *@>
                                <td class="tdOnclick">
                                    @item.TrainingId
                                </td>
                                <td class="tdOnclick">
                                    @item.GeneralLocation
                                </td>

                                <td class="tdOnclick">
                                    @item.LocationDetails
                                </td>

                                <td class="tdOnclick">
                                    @item.Date.ToString()
                                </td>


                                <td style="background-color:white">
                                    <button class="displayButton" onclick="location.href='@Url.Action("Training", "Trainings", new { id = @item.TrainingId })'">wyświetl</button>
                                </td>

                                @{ if (LoginHelper.IsAuthenticated())
                                    {
                                        <td style="background-color:white">
                                            @*location.href='@Url.Action("DeleteDog", "Dogs", new { id = @item.DogId })'*@
                                            <button class="deleteButton" onclick="deleteTraining(@item.TrainingId)" id="@("deleteTrainingButton" + item.TrainingId)">usuń</button>
                                        </td>
                                        <td style="background-color:white">
                                            <button class="updateButton" onclick="location.href='@Url.Action("UpdateTraining", "Trainings", new { id = @item.TrainingId })'">zmień</button>
                                        </td>

                                        <td>
                                            <button type="button" class="displayButton" onclick="location.href='@Url.Action("Add", "DogTrainings", new { trainingId = @item.TrainingId })'">Dodaj psa do treningu</button>

                                        </td>
                                    }
                                }
                            </tr>

                        }

                    </table>
                }
            </div>
</div>
<script>
    function searchByLocationOrDate() {
        var input, filter, table, tr, td, i;
        input = document.getElementById("trainingsSearch");
        filter = input.value.toUpperCase();
        table = document.getElementById("trainingsTable");
        tr = table.getElementsByTagName("tr");
        for (i = 0; i < tr.length; i++) {
             /* search by general location*/
            tdTrainingGeneralLocation = tr[i].getElementsByTagName("td")[1];
            /* search by location's details*/
            tdTrainingLocationDetails = tr[i].getElementsByTagName("td")[2];
            /* search by date*/
            tdTrainingDate = tr[i].getElementsByTagName("td")[3];
            if (tdTrainingGeneralLocation || tdTrainingLocationDetails || tdTrainingDate) {
                if (tdTrainingGeneralLocation.innerHTML.toUpperCase().indexOf(filter) > -1
                    || tdTrainingLocationDetails.innerHTML.toUpperCase().indexOf(filter) > -1
                    || tdTrainingDate.innerHTML.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
    @* location.href='@Url.Action("DeleteDog", "Dogs", new { id = @item.DogId })' *@

    function deleteTraining(trainingId) {
       // var id = dogId;
        alert("Delete training: " + trainingId);
        //document.getElementById("disp").innerHTML = "hi";
        $.ajax({
            url: "@Url.Action("DeleteTraining", "Trainings")",
            method: "POST", //First change type to method here

            data: {
                id: trainingId, // Second add quotes on the value.
            },
            success: function (response) {
                if (response) {
                    //var resp = jQuery.parseJSON(response);
                    var resp = response;
                    //console.log(resp);
                    if (resp.success) {
                        alert("udało się usunac przewodnika o id: " + resp.id);
                        //usunięcie z tabeli tr ktory zawiera button o id deleteDogButton<id>
                        //var buttonId = "deleteDogButton" + dogId;
                    var button = $("#deleteTrainingButton" + resp.id );

                    var tableRow = button.closest("tr");
                        //alert(button.text());
                        tableRow.remove();
                    }
                }
            },
            error: function () {
                alert("error");
            }

        });
    }


    function sortTable(n, isDate) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("trainingsTable");
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (isDate == true) {
                        var date1 = new Date(x.innerHTML);
                        var date2 = new Date(y.innerHTML);
                        if (date1 < date2) {
                          shouldSwitch = true;
                          break;
                        }
                    }
                    else if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
                else if (dir == "desc") {
                    if (isDate == true) {
                        var date1 = new Date(x.innerHTML);
                        var date2 = new Date(y.innerHTML);
                        if (date1 > date2) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                    else if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount ++;
            }
            else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        } 
    }

    //$(document).ready(function () {
    //    $('#dogsTable').on("click", "td.tdOnclick", function () {
    //        alert('ho ho ho');
    //    });
    //});
</script>

@*
    </div>

*@

