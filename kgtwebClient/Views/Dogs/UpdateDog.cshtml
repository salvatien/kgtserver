@using kgtwebClient.Helpers;
@using Dogs.ViewModels.Data.Models.Enums;


@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    /*var workmodes = new List<DogWorkmodeWrapper> { new DogWorkmodeWrapper { Id = 1, Workmode = DogWorkmode.Terrain},
                           new DogWorkmodeWrapper { Id = 2, Workmode = DogWorkmode.Rescue},
                           new DogWorkmodeWrapper { Id = 3, Workmode = DogWorkmode.Rubble}};*/
}
@{
    //var workmodeList = new List<SelectListItem> { new SelectListItem { Value = "1", Text = "Water"}, new SelectListItem { Value = "2", Text = "Resque"},
    //                                       new SelectListItem { Value = "3", Text = "ziemniak"} };
    // var selected = new List<int> { 1, 3 };


    var currentWorkmodes = EnumHelpers.GetFlags(Model.Workmodes).ToList();
    var EnumCount = Enum.GetValues(typeof(DogWorkmode)).Length;
    var guides = GuideHelpers.GetAllGuidesIdAndName();

}

@model Dogs.ViewModels.Data.Models.DogModel

@*

        @using (Html.BeginForm("Upload", "Upload", FormMethod.Post,
                                          new { enctype = "multipart/form-data" }))
    {
        @Html.ValidationSummary(true)
        <fieldset>
            Select a file <input type="file" name="file" />
            <input type="submit" value="Upload" />
        </fieldset>
    }

*@
@*
    <!DOCTYPE html>

    <html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title></title>
    </head>
    <body>
*@
<div style="margin:60px">

    @using (Html.BeginForm("UpdateDog", "Dogs",@*new { id = Model.DogId},*@ /**/  FormMethod.Post, new { enctype = "multipart/form-data"@*, onsubmit = "caculateWorkmodeSum()"*@ }))
{
@Html.ValidationSummary(true)
@Html.HiddenFor(m => m.DogId)
@* <fieldset>*@
    <div style="float:left">
        <div class="form-group">
            @Html.LabelFor(m => m.Name, new { @class = "col-md-2 control-label form-field" })
            <div class="col-md-10  form-field">
                @Html.TextBoxFor(m => m.Name, new { @Value = Model.Name, @id = "updateDogName", @class = "form-control" })
            </div>
            <div id="updateDogNameValidationInfo" class="formValidation">
                To pole nie może być puste.
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Breed, new { @class = "col-md-2 control-label form-field" })
            <div class="col-md-10  form-field">
                @Html.TextBoxFor(m => m.Breed, new { @Value = Model.Breed, @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.DateOfBirth, new { @class = "col-md-2 control-label form-field" })
            <div class="col-md-10  form-field">
                @Html.TextBoxFor(m => m.DateOfBirth, new { @Value = Model.DateOfBirth.ToString("yyyy-MM-dd"), type = "date", @id = "updateDogDateOfBirth", @class = "form-control" })
            </div>
            <div id="updateDogDateOfBirthValidationInfo" class="formValidation">
                To pole nie może być puste.
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Level, new { @class = "col-md-2 control-label  form-field" })
            <div class="col-md-10 form-field">
                @Html.EnumDropDownListFor(m => m.Level, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Workmodes, new { @class = "col-md-2 control-label form-field" })
            <div class="col-md-10 form-field">
                @foreach (int workmode in Enum.GetValues(typeof(DogWorkmode)))
                {
                    var workmodeName = Enum.GetName(typeof(DogWorkmode), workmode);
                    if (currentWorkmodes.Contains(Enum.Parse(typeof(DogWorkmode), workmodeName)))
                    {
                        @Html.CheckBox(workmodeName, true, new { @*@class = "form-control",*@@id = "dogWorkmode" + workmode
                    })
                        @Html.DisplayName(workmodeName)
                        <br />
                    }
                    else
                    {
                        @Html.CheckBox(workmodeName, false, new { @*@class = "form-control",*@@id = "dogWorkmode" + workmode
                    })
                        @Html.DisplayName(workmodeName)
                        <br />
                    }
                }
            </div>
        </div>
        <div>
            @Html.HiddenFor(m => m.Workmodes, new { @id = "workmodeSum" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Notes, new { @class = "col-md-2 control-label form-field" })
            <div class="col-md-10 form-field">
                @Html.TextAreaFor(m => m.Notes, new { @Value = Model.Notes, @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.GuideIdAndName, new { @class = "col-md-2 control-label form-field" })
            <div class="col-md-10 form-field">
                @Html.DropDownListFor(m => m.GuideIdAndName.Id, guides, new { @class = "form-control" })
            </div>
        </div>
        @*<div>
            @Html.HiddenFor(m => m.GuideIdAndName.GuideId, new { @Value = })
        </div>*@
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn btn-default form-field" value="Prześlij dane" onclick="return validateUpdateDog()" />
            </div>
        </div>
        @*/////////////////////////////////////////////////////*@
    </div>
<div class="picture">
    <img src="~/Images/januszek.jpg" height="400" width="400">
    <br />
    Wybierz nowe zdjęcie: <input type="file" name="file" />

</div>
@*</fieldset>*@
}
</div>

<script>
    function caculateWorkmodeSum() {
        var workmodeSum = 0;
        for (var i = 0; i < @EnumCount; i++) {

            console.log('#dogWorkmode' + Math.pow(2, i));
            console.log("tuu");
            console.log($('#dogWorkmode' + Math.pow(2, i)).prop('checked'));


            if ($('#dogWorkmode' + Math.pow(2, i)).is(':checked')) {
                workmodeSum += Math.pow(2, i);
            }
        }
        console.log(@EnumCount);
        console.log("workmode: " + workmodeSum);
        $('#workmodeSum').val(workmodeSum);
    }

    function validateUpdateDog() {
        alert("walidacja start");
        caculateWorkmodeSum();
        var dogName = document.getElementById("updateDogName").value;
        //alert(typeof $('#addDogDateOfBirth').val());
        if ($('#updateDogName').val() == "" || $('#updateDogDateOfBirth').val() == "") {
            if ($('#updateDogName').val() == "")
                document.getElementById("updateDogNameValidationInfo").style.display = "block";
            else
                document.getElementById("updateDogNameValidationInfo").style.display = "none";

            if ($('#updateDogDateOfBirth').val() == "")
                document.getElementById("updateDogDateOfBirthValidationInfo").style.display = "block";
            else
                document.getElementById("updateDogDateOfBirthValidationInfo").style.display = "none";


            return false;
        }
    }
</script>
@*
    </body>
    </html>
*@