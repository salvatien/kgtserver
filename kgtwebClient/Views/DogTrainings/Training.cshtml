@using System.Configuration;
@using kgtwebClient.Helpers;
@using Dogs.ViewModels.Data.Models;

@{
    ViewBag.Title = "Training";
    var googleMapsLinkWithApiKey = "https://maps.googleapis.com/maps/api/js?key=" + @ConfigurationManager.AppSettings["GoogleApiKey"] + "&callback=initMap";
    var mostRecentCommentDate = new DateTime();
}

@model Dogs.ViewModels.Data.Models.DogTrainingViewModel


<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Complex Polylines</title>
    <style>
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            height: 100%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
</head>
<body><div style="margin:60px; position:static">
    <div id="map" style="width:55%; height:500px; display:inline-block;"></div>
    <div style="display:inline-block; width:20%; margin:20px;">
        <div class="form-group">
            @Html.LabelFor(m => m.DogTrackLength, new { @class = "control-label form-field" })
            <div class="col-md-10  form-field">
                @Html.TextBoxFor(m => m.DogTrackLength, new { @id = "dogTrackLength", @class = "form-control", disabled = "true" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.TimeOfDogStart, new { @class = "control-label form-field" })
            <div class="col-md-10  form-field">
                @Html.TextBoxFor(m => m.TimeOfDogStart, new { @id = "timeOfDogStart", @class = "form-control", disabled = "true" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Duration, new { @class = "control-label form-field" })
            <div class="col-md-10  form-field">
                @Html.TextBoxFor(m => m.Duration, new { @id = "duration", @class = "form-control", disabled = "true" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.LostPersonTrackLength, new { @class = "control-label form-field" })
            <div class="col-md-10  form-field">
                @Html.TextBoxFor(m => m.LostPersonTrackLength, new { @id = "lostPersonTrackLength", @class = "form-control", disabled = "true" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.TimeOfLostPersonStart, new { @class = "control-label form-field" })
            <div class="col-md-10  form-field">
                @Html.TextBoxFor(m => m.TimeOfLostPersonStart, new { @id = "timeOfLostPersonStart", @class = "form-control", disabled = "true" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.DelayTime, new { @class = "control-label form-field" })
            <div class="col-md-10  form-field">
                @Html.TextBoxFor(m => m.DelayTime, new { @id = "delayTime", @class = "form-control", disabled = "true" })
            </div>
        </div>
    </div>

        <script>

        // This example creates an interactive map which constructs a polyline based on
        // user clicks. Note that the polyline only appears once its path property
        // contains two LatLng coordinates.
        var polyPerson;     //lines for person track
        var poly;           // lines for dos track
        var map;
        var personMarkers = [];
        var dogMarkers = [];

        var personTraceData = [];   //data about person trace - longitude, latitide, time
        var dogTraceData = [];

        function initPersonTraceData() {
            @foreach (var pt in Model.LostPersonTrackPoints)
            {
                var t = pt.Time;
                @: var date = '@HttpUtility.JavaScriptStringEncode(t)';
                @*@: var time = new Date(date).toLocaleTimeString();*@
                @: var time = new Date(date).toISOString();

                @: personTraceData.push({latitude: @pt.Lat, longitude: @pt.Lon, time: time });
            }
        }

        function initDogTraceData() {
            @foreach (var pt in Model.DogTrackPoints)
            {
                var t = pt.Time;
                @: var date = '@HttpUtility.JavaScriptStringEncode(t)';
                @*@: var time = new Date(date).toLocaleTimeString();*@
                @: var time = new Date(date).toISOString();
                @: dogTraceData.push({ latitude: @pt.Lat, longitude: @pt.Lon, time: time });
                @: console.log( "init dog trace data" + @pt.Lat +  @pt.Lon + "time: " +  time);
            }
        }

        function createPersonMarkers() {
            @{ int counter = 0; }
            @foreach (var pt in @Model.LostPersonTrackPoints) {
                var t = pt.Time;
                @: var date = '@HttpUtility.JavaScriptStringEncode(t)';
                @: var time = new Date(date).toLocaleTimeString();

                @:  var marker = new google.maps.Marker({
                @:        position: { lat: @pt.Lat, lng: @pt.Lon },
                @:        label: {
                @:          text: "@counter",
                @:          fontSize: "0px"
                @:        },
                @:        icon: {
                @:          path: google.maps.SymbolPath.CIRCLE,
                @:          strokeColor: "blue",
                @:          scale: 1.5
                @:        },
                @:        title: 'czas: ' + time    @*'\'   @pt.Time\''*@,
                @:        map: map
                @:  });

                @:  personMarkers.push(marker);
                @*@:  console.log(personMarkers);*@
            counter++;

            // add InfoWindow for marker
                @*@:  console.log("time: " + time);*@
                @:  google.maps.event.addListener(marker, 'click', function (event) {
                @:      var infowindow = new google.maps.InfoWindow({
                @:                      content: "<div class='personInfoWindow'>"
                @:                      + 'szerokość:' + @pt.Lat +  ',\n długość:' + @pt.Lon
                @:                      + ',\n czas:'
                @:                      + new Date('@HttpUtility.JavaScriptStringEncode(pt.Time)').toLocaleTimeString()
                @:                      + "<br><input type='button' class='markerStartButton' value='Oznacz jako punkt początkowy' onclick='setStartPoint(" + new google.maps.Marker(this).label.text + ")'>"
                @:                      + "<input type='button' class='markerEndButton' value='Oznacz jako punkt końcowy' onclick='setEndPoint(" + new google.maps.Marker(this).label.text + ")'>"
                @:                      + "</div>"

                @:                  });

                @:      infowindow.open(map, this);

                @: });


            }
        }

        function createPersonTrace() {
            var personPoints = [];
            @foreach (var pt in Model.LostPersonTrackPoints)
            {
                @: personPoints.push({ lat: @pt.Lat, lng: @pt.Lon});
            }
            console.log("person: " + personPoints[5].lat + " " + personPoints[5].lng);

            polyPerson = new google.maps.Polyline({
                path: personPoints,
                strokeColor: '#0000FF',
                strokeOpacity: 1.0,
                strokeWeight: 3
            });
            polyPerson.setMap(map);
        }

        function createDogMarkers() {
            @{ int labelCounter = 0; }
            @foreach (var pt in @Model.DogTrackPoints) {
                var t = pt.Time;
                @: var date = '@HttpUtility.JavaScriptStringEncode(t)';
                @: var time = new Date(date).toLocaleTimeString();

                @:  var marker = new google.maps.Marker({
                @:        position: { lat: @pt.Lat, lng: @pt.Lon },
                @:        label: {
                @:          text: "@labelCounter",
                @:          fontSize: "0px"
                @:        },
                @:        icon: {
                @:          path: google.maps.SymbolPath.CIRCLE,
                @:          strokeColor: "red",
                @:          scale: 1.5
                @:        },
                @:        title: 'czas: ' + time    @*'\'   @pt.Time\''*@,
                @:        map: map
                @:  });

                @:  dogMarkers.push(marker);
                @*@:  console.log(personMarkers);*@
            labelCounter++;

                @*@:  console.log("time: " + time);*@
                @:  google.maps.event.addListener(marker, 'click', function (event) {
                @:      var infowindow = new google.maps.InfoWindow({
                @:                      content: "<div class = 'dogInfoWindow'>"
                @:                      + 'szerokość:' + @pt.Lat +  ',\n długość:' + @pt.Lon
                @:                      + ',\n czas:'
                @:                      + new Date('@HttpUtility.JavaScriptStringEncode(pt.Time)').toLocaleTimeString()
                @:                      + "<br><input type='button' class='markerStartButton' value='Oznacz jako punkt początkowy' onclick='setStartPointForDog(" + new google.maps.Marker(this).label.text + ")'>"
                @:                      + "<input type='button' class='markerEndButton' value='Oznacz jako punkt końcowy' onclick='setEndPointForDog(" + new google.maps.Marker(this).label.text + ")'>"
                @:                      + "</div>"
                @:                  });

                @:      infowindow.open(map, this);


                @: });


            }
        }

        function createDogTrace() {
            var dogPoints = [];
            @foreach (var pt in Model.DogTrackPoints)
            {
                @: dogPoints.push({ lat: @pt.Lat, lng: @pt.Lon});

            }
            poly = new google.maps.Polyline({
                path: dogPoints,
                strokeColor: '#FF0000',
                strokeOpacity: 1.0,
                strokeWeight: 3
            });
            poly.setMap(map);
        }

        function initMap() {
            initPersonTraceData();
            initDogTraceData();

            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 16,
                center: { lat: dogTraceData[0].latitude, lng: dogTraceData[0].longitude },  // Center the map on POLSZA
                mapTypeId: "satellite"
            });
            // dog trace - draw lines
            createDogTrace();

            // person trace - draw lines
            createPersonTrace();
            //person trace - draw markers
            createPersonMarkers();
            //dog trace - draw markers
            createDogMarkers();

            console.log("dogMarkers:" + dogMarkers.length + " personMarkers: " + personMarkers.length);

        }

        function setStartPoint(startMarker) {
            //console.log("setSartPoint");
            //console.log("marker " + startMarker);
            for (let i = 0; i < personMarkers.length; i++) {
                console.log("i: " + i);
                console.log(personMarkers[i].label.text);

                if (personMarkers[i].label.text == startMarker) {
                    console.log("if");

                    personMarkers.splice(0, i);
                    personTraceData.splice(0, i);
                    console.log(personTraceData);
                    console.log("personTraceData: " + personTraceData[0].time);

                    // change values in data div dynamically
                    updateDataInTextBox(personTraceData, "CalculateGPSTrackLength", "DogTrainings", "lostPersonTrackLength");
                    updateDataInTextBox(personTraceData, "CalculateGPSTrackStartTime", "DogTrainings", "timeOfLostPersonStart");

                    var newDelayTimeMiliSec = new Date($('#timeOfDogStart').val()) - new Date($('#timeOfLostPersonStart').val());
                    var newDelayTime = new Date(newDelayTimeMiliSec);
                    var utc = new Date(newDelayTime.getTime() + newDelayTime.getTimezoneOffset() * 60000);

                    $('#delayTime').val(handleOneDigitTimeString(utc.getHours()) + ":"
                        + handleOneDigitTimeString(utc.getMinutes()) + ":"
                        + handleOneDigitTimeString(utc.getSeconds()));

                    break;
                }

                personMarkers[i].setMap(null);
                polyPerson.getPath().removeAt(personMarkers[i]);    //this works - don't change it to i (like in function setEndPoint)  don't know why xd
            }

        }

        function setStartPointForDog(startMarker) {
            console.log("setSartPoint");
            console.log("marker " + startMarker);
            for (let i = 0; i < dogMarkers.length; i++) {
                if (dogMarkers[i].label.text == startMarker) {
                    dogMarkers.splice(0, i);
                    dogTraceData.splice(0, i);
                    console.log("dogTraceData: " + dogTraceData[0].time);

                    // change values in data div dynamically
                    updateDataInTextBox(dogTraceData, "CalculateGPSTrackLength", "DogTrainings", "dogTrackLength");
                    updateDataInTextBox(dogTraceData, "CalculateGPSTrackStartTime", "DogTrainings", "timeOfDogStart");
                    updateDataInTextBox(dogTraceData, "CalculateDuration", "DogTrainings", "duration");

                    //delay time
                    var newDelayTimeMiliSec = new Date($('#timeOfDogStart').val()) - new Date($('#timeOfLostPersonStart').val());
                    var newDelayTime = new Date(newDelayTimeMiliSec);
                    var utc = new Date(newDelayTime.getTime() + newDelayTime.getTimezoneOffset() * 60000);

                    $('#delayTime').val(handleOneDigitTimeString(utc.getHours()) + ":"
                        + handleOneDigitTimeString(utc.getMinutes()) + ":"
                        + handleOneDigitTimeString(utc.getSeconds()));

                  

                    break;
                }

                dogMarkers[i].setMap(null);
                poly.getPath().removeAt(dogMarkers[i]);    //this works - don't change it to i (like in function setEndPoint)  don't know why xd
            }

        }

        function setEndPoint(startMarker) {
            console.log("setSartPoint");
            console.log("marker " + startMarker);
            for (let i = personMarkers.length - 1; i >= 0; i--) {
                //console.log("i: " + i);
                //console.log(personMarkers[i].label.text);


                if (personMarkers[i].label.text == startMarker) {
                    console.log("if");

                    personMarkers.splice(i + 1, personMarkers.length - i);
                    personTraceData.splice(i + 1, personTraceData.length - i);
                    for (var j = 0; j < personTraceData.length; j++)
                        console.log("personTraceData, time: " + personTraceData[j].time);

                    updateDataInTextBox(personTraceData, "CalculateGPSTrackLength", "DogTrainings", "lostPersonTrackLength");

                    break;
                }


                personMarkers[i].setMap(null);
                polyPerson.getPath().removeAt(i);

            }

        }

        function setEndPointForDog(startMarker) {
            console.log("setEndPoint");
            console.log("marker " + startMarker);
            for (let i = dogMarkers.length - 1; i >= 0; i--) {
                //console.log("i: " + i);
                //console.log(dogMarkers[i].label.text);


                if (dogMarkers[i].label.text == startMarker) {
                    console.log("if");

                    dogMarkers.splice(i + 1, dogMarkers.length - i);

                    dogTraceData.splice(i + 1, dogTraceData.length - i);
                    console.log("dogtracedate length: " + dogTraceData.length);
                    for (var j = 0; j < dogTraceData.length; j++) {
                        console.log("dogTraceData, time: " + dogTraceData[j].time);
                    }

                    console.log("length " + dogMarkers.length);
                    updateDataInTextBox(dogTraceData, "CalculateGPSTrackLength", "DogTrainings", "dogTrackLength");
                    updateDataInTextBox(dogTraceData, "CalculateDuration", "DogTrainings", "duration");

                    break;
                }


                dogMarkers[i].setMap(null);
                poly.getPath().removeAt(i);

            }

        }

            function handleOneDigitTimeString(n) { return n > 9 ? "" + n : "0" + n;}

        function updateDataInTextBox(data, method, controller, fieldId) {
            var trkpts = JSON.stringify({ 'trkpts': data });
            $.ajax({
                url: "/" + controller + "/" + method,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                data: trkpts,
                traditional: true,
                async: false,
                success: function (data, textStatus, xhr) {
                    if (data.success) {
                        alert(data.result);
                        // set person track length field to data.trackLength with jquery or getelementbyid
                        console.log(typeof data.result);
                            
                        $("#" + fieldId).val(data.result);
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                    alert('Error in ' + method);

                }
            });
        }

        function setUpdatedDogTracepoints(i, lat, lon, tim) {
            $('#dogLatitude' + i).val(lat);
            $('#dogLongitude' + i).val(lon);
            $('#dogTime' + i).val(tim);
        }

        function setUpdatedPersonTracepoints(i, lat, lon, tim) {
            $('#personLatitude' + i).val(lat);
            $('#personLongitude' + i).val(lon);
            $('#personTime' + i).val(tim);
        }

        function removeElement(elementId) {
            // Removes an element from the document
            var element = document.getElementById(elementId);
            element.parentNode.removeChild(element);
        }

        function validateUpdateTraining() {
            //here: add validation for form
            for (var i = 0; i < dogTraceData.length; i++)
                setUpdatedDogTracepoints(i, dogTraceData[i].latitude, dogTraceData[i].longitude, dogTraceData[i].time);

            for (var i = dogTraceData.length; i < @Model.DogTrackPoints.Count; i++) {
                console.log("dogTraceDataLength:" + dogTraceData.length);
                console.log("model dog track points: " + @Model.DogTrackPoints.Count);
                removeElement("dogLatitude" + i);
                removeElement("dogLongitude" + i);
                removeElement("dogTime" + i);
            }

            for (var i = 0; i < personTraceData.length; i++)
                setUpdatedPersonTracepoints(i, personTraceData[i].latitude, personTraceData[i].longitude, personTraceData[i].time);

            for (var i = personTraceData.length; i < @Model.LostPersonTrackPoints.Count; i++) {
                removeElement("personLatitude" + i);
                removeElement("personLongitude" + i);
                removeElement("personTime" + i);
            }

            //return false;
        }


        </script>
        <script async defer
                src="@googleMapsLinkWithApiKey">
        </script>
        <div style="display:inline-block; width:20%">
            @using (Html.BeginForm("Update", "DogTrainings", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.ValidationSummary(true)
                @Html.HiddenFor(m => m.Training)
                @Html.HiddenFor(m => m.TrainingId)
                @Html.HiddenFor(m => m.Dog)
                @Html.HiddenFor(m => m.DogId)
                @Html.HiddenFor(m => m.DogTrackFilename)
                @Html.HiddenFor(m => m.LostPersonTrackFilename)
                @Html.HiddenFor(m => m.DogTrackFilename)
                @*@Html.HiddenFor(m => m.DogTrackPoints)*@

                @*for (int i = 0; i < Model.DogTrackPoints.Count; i++)
                {
                    @Html.Hidden("dogLatitude" + i, 0);
                    @Html.Hidden("dogLongitude" + i, 0);
                    @Html.Hidden("dogTime" + i, 0);
                }*@

                for (int i = 0; i < Model.DogTrackPoints.Count; i++)
                {
                    @*@Html.HiddenFor(model => Model.DogTrackPoints[i].Ele)*@
                    @Html.HiddenFor(model => Model.DogTrackPoints[i].Lat, new { @id = "dogLatitude" + i })
                    @Html.HiddenFor(model => Model.DogTrackPoints[i].Lon, new { @id = "dogLongitude" + i })
                    @Html.HiddenFor(model => Model.DogTrackPoints[i].Time, new { @id = "dogTime" + i })
                    @*@Html.HiddenFor(model => Model.DogTrackPoints[i].Extensions)*@

                }
                @*@Html.HiddenFor(m => m.LostPersonTrackPoints)*@

                @*for (int i = 0; i < Model.LostPersonTrackPoints.Count; i++)
                {
                    @Html.Hidden("personLatitude" + i, 0);
                    @Html.Hidden("personLongitude" + i, 0);
                    @Html.Hidden("personTime" + i, 0);
                }*@

                for (int i = 0; i < Model.LostPersonTrackPoints.Count; i++)
                {
                    @*@Html.HiddenFor(model => Model.LostPersonTrackPoints[i].Ele)*@
                    @Html.HiddenFor(model => Model.LostPersonTrackPoints[i].Lat, new { @id = "personLatitude" + i })
                    @Html.HiddenFor(model => Model.LostPersonTrackPoints[i].Lon, new { @id = "personLongitude" + i })
                    @Html.HiddenFor(model => Model.LostPersonTrackPoints[i].Time, new { @id = "personTime" + i })
                    @*@Html.HiddenFor(model => Model.LostPersonTrackPoints[i].Extensions)*@

                }
                @Html.HiddenFor(m => m.TimeOfDogStart)
                @Html.HiddenFor(m => m.TimeOfLostPersonStart)
                @Html.HiddenFor(m => m.Duration)
                @Html.HiddenFor(m => m.LostPersonTrackLength)
                @Html.HiddenFor(m => m.DogTrackLength)
                @Html.HiddenFor(m => m.Goal)

                if (LoginHelper.IsAuthenticated())
                {
                    <div @*style="display:inline-block;"*@>
                        <div class="form-group">
                            @Html.LabelFor(m => m.LostPerson, new { @class = "col-md-2 control-label form-field" })
                            <div class="col-md-10  form-field">
                                @Html.TextBoxFor(m => m.LostPerson, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.Notes, new { @class = "col-md-2 control-label form-field" })
                            <div class="col-md-10  form-field">
                                @Html.TextAreaFor(m => m.Notes, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.Weather, new { @class = "col-md-2 control-label form-field" })
                            <div class="col-md-10  form-field">
                                @Html.TextAreaFor(m => m.Weather, new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" class="btn btn-default form-field" value="Prześlij dane" onclick="return validateUpdateTraining()" />
                            </div>
                        </div>
                    </div>






                }
                else
                {
                    <div @*style="display:inline-block;"*@>
                        <div class="form-group">
                            @Html.LabelFor(m => m.LostPerson, new { @class = "col-md-2 control-label form-field" })
                            <div class="col-md-10  form-field">
                                @Html.TextBoxFor(m => m.LostPerson, new { @class = "form-control", disabled = "true" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.Notes, new { @class = "col-md-2 control-label form-field" })
                            <div class="col-md-10  form-field">
                                @Html.TextBoxFor(m => m.Notes, new { @class = "form-control", disabled = "true" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.Weather, new { @class = "col-md-2 control-label form-field" })
                            <div class="col-md-10  form-field">
                                @Html.TextAreaFor(m => m.Weather, new { @class = "form-control", disabled = "true" })
                            </div>
                        </div>

                        @*@if (Model.Comments != null && Model.Comments.Any())
                        {
                            <dt>
                                @Html.DisplayNameFor(model => model.Comments)
                            </dt>
                            <dd>
                                <table id="commentsTable">
                                    @{
                                        foreach (var comment in Model.Comments)
                                        {
                                            <tr class="comment">
                                                <td>@Html.DisplayFor(m => comment.AuthorName)</td>
                                                <td>@Html.DisplayFor(m => comment.Date)</td>
                                                <td>@Html.DisplayFor(m => comment.Content)</td>
                                                @if (comment.Date > mostRecentCommentDate)
                                                {
                                                    mostRecentCommentDate = comment.Date;
                                                }
                                            </tr>

                                        }
                                    }
                                </table>
                                <p id="newCommentWasAdded" hidden style="color:red"> Dodano nowy komentarz lub zmieniono istniejący! Odśwież stronę, aby zobaczyć najnowsze dane </p>

                            </dd>
                        }*@

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" class="btn btn-default form-field" value="Prześlij dane" onclick="return validateUpdateTraining()" disabled />
                            </div>
                        </div>
                    </div>
                }

            }
        </div>

        @if (LoginHelper.IsAuthenticated())
        {

            <div style="float:left; clear:left; min-width:50%;">
                <dl>
                    @if (Model.Comments != null && Model.Comments.Any())
                    {
                        <dt>
                            @Html.DisplayNameFor(model => model.Comments)
                        </dt>
                        <dd>
                            <table id="commentsTable" style="width:100%; table-layout:fixed">
                                @{
                                    foreach (var comment in Model.Comments)
                                    {
                                        <tr class="comment">
                                            @if (comment.AuthorId == LoginHelper.GetCurrentUserId())
                                            {
                                                <td>Ja</td>
                                            }
                                            else
                                            {
                                                <td>@Html.DisplayFor(m => comment.AuthorName)</td>
                                            }
                                            <td>@Html.DisplayFor(m => comment.Date)</td>
                                            <td style="max-width:25%; overflow:auto;">@Html.DisplayFor(m => comment.Content)</td>
                                            @if (comment.Date > mostRecentCommentDate)
                                            {
                                                mostRecentCommentDate = comment.Date;
                                            }
                                            @{ if (LoginHelper.IsCurrentUserAdmin() || LoginHelper.GetCurrentUserId() == comment.AuthorId)
                                                {
                                                    <td style="background-color:white">
                                                        <button class="deleteButton" type="button" onclick="deleteComment(@comment.CommentId)" id="@("deleteCommentButton" + comment.CommentId)">usuń</button>
                                                    </td>
                                                }
                                            }
                                        </tr>

                                    }
                                }
                            </table>

                        </dd>
                    }
                </dl>
                @Html.TextArea("Message", new { id = "newCommentMessage", rows = 8, columns = 40 })<br />
                <button class="displayButton" type="button" id="addNewComment">Dodaj komentarz</button>
                <p id="newCommentWasAdded" hidden style="color:red"> Dodano nowy komentarz lub zmieniono istniejący! Odśwież stronę, aby zobaczyć najnowsze dane </p>

            </div>
        }
        <script src="https://code.jquery.com/jquery-1.11.0.min.js" type="text/javascript"></script>

        <script>

    function showNewCommentMessage() {
        var ticks = @mostRecentCommentDate.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds;
        var time = new Date(ticks);
            $.ajax({
                url: "@Html.Raw(Url.Action("GetDogTrainingCommentsByDogIdAndTrainingId", "Comments", new { dogId = Model.DogId, trainingId = Model.TrainingId }))",
                type: 'GET',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    if (data.success) {
                        for (comment of data.data) {
                            var date = new Date(comment.date);
                            if (date > time) {
                                $('#newCommentWasAdded').removeAttr('hidden');
                            }
                        }
                    }
                },
            error: function (xhr, textStatus, errorThrown) {
                console.log('Error in Database');

            }
        });
        }

        //check every 2 minutes for updates in comments
    setInterval(function () { showNewCommentMessage(); }, 120000);

    //Add New Comment
    $('#addNewComment').on('click', function (e) {

        var trainingId = @Model.TrainingId;
        var commentMsg = $('#newCommentMessage').val();
        var dateTimeNow = new Date();

        var comment = {
            AuthorId: @LoginHelper.GetCurrentUserId(),
            Date: dateTimeNow.toLocaleString(),
            Content: commentMsg,
            TrainingId: @Model.TrainingId,
            DogId: @Model.DogId
        };

        console.log(comment);

        $.ajax({
            type: 'POST',
            url: "@Url.Action("AddDogTrainingComment", "Comments")",
            data: comment,
            dataType: 'json',
            contentType: "application/x-www-form-urlencoded",
            success: function (response) {
                if (response.success) {
                    var id = response.id;
                    var itemIndex = $(".comment").length;
                    e.preventDefault();
                    //html code for a new row containing this comment
                    var html = $('<tr class="comment" id="comment-"' + itemIndex + '>'
                        + '<td>' + "Ja" + '</td>'
                        + '<td>' + comment.Date + '</td>'
                        + '<td>' + comment.Content + '</td>'
                        + '<td style="background-color:white">'
                            + '<button class="deleteButton"  type="button" onclick="deleteComment(' + id + ')" '
                                + 'id="@("deleteCommentButton")' + id + '">usuń'
                            + '</button>'
                        + '</td ></tr > ');
                    $("#commentsTable").append(html);
                    $('#newCommentMessage').val("");
                }
            },
            error: function (response) {
                alert('Sorry: Something Wrong');
            }

        });

        });

        function deleteComment(commentId) {
        alert("Delete comment: " + commentId);
        $.ajax({
            url: "@Url.Action("DeleteDogTrainingComment", "Comments")",
            method: "POST", //First change type to method here
            data: {
                id: commentId,
            },
            success: function (response) {
                if (response) {
                    //var resp = jQuery.parseJSON(response);
                    var resp = response;
                    //console.log(resp);
                    if (resp.success) {
                        alert("udało się usunac komentarz o id: " + resp.id);
                        //usunięcie z tabeli tr ktory zawiera button o id deleteDogButton<id>
                        //var buttonId = "deleteDogButton" + dogId;
                    var button = $("#deleteCommentButton" + resp.id );

                    var tableRow = button.closest("tr");
                        //alert(button.text());
                        tableRow.remove();
                    }
                }
            },
            error: function () {
                alert("error");
            }

        });
    }
        </script>

</body>
</html>