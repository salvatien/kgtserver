@using Dogs.ViewModels.Data.Models;
@using kgtwebClient.Helpers;

@model List<Dogs.ViewModels.Data.Models.DogTrainingModel>

@*TODO: get in different way dog id to AddTrainingToDog !!!!!!*@
@{
    ViewBag.Title = "Home Page";
    var id = ViewBag.Id;
}



@*<div class="jumbotron"> *@
<div class="tables">
    <input type="text" id="dogTrainingsSearch" onkeyup="searchByTrainingLocalization()" placeholder="Szukaj po miejscu/dacie" title="Type in a name">
    @{ if (LoginHelper.IsAuthenticated()) { 
            <button type="button" class="addButton" onclick="location.href='@Url.Action("AddTrainingToDog", "DogTrainings", new { dogId = id})'">dodaj trening</button>
    }}
        <div>

            <h5> Kliknij na nazwę kolumny, aby posortować względem niej.</h5>
            <h6> Kliknij kolejny raz, aby zmienić porządek sortowania.</h6>

            <h1 style="color:red">DODAC DLUGOSC SLADU (w metrach) I CZAS ODLOZENIA DO TEJ TABELKI + sortowanie po nich????? </h1>

            <table id="dogTrainingsTable">
                <tr>
                        
                    <th onclick="sortTable(0, false)">ID</th>
                    <th onclick="sortTable(1, false)">Lokacja</th>
                    <th onclick="sortTable(2, false)">Adres</th>
                    <th onclick="sortTable(3, true)">Data</th>
                    <th onclick="sortTable(4, false)">Długość śladu</th>
                    <th onclick="sortTable(5, false)">Czas odłożenia</th>
                </tr>
                @foreach (var item in Model)

                {
                <tr @*onclick="document.location = 'http://kgtwebclient.azurewebsites.net/Dogs/Dog/' + @item.DogId;"  *@>
                    <td class="tdOnclick">
                        @item.TrainingId
                    </td>
                    <td class="tdOnclick">
                        @item.Training.GeneralLocation
                    </td>
                    @*<td class="tdOnclick">
            @item.DateOfBirth
        </td>
        <td class="tdOnclick">
            @item.Level
        </td>
        <td class="tdOnclick">
            @item.Workmode
        </td>
        <td class="tdOnclick">
            @item.Notes
        </td>
                    *@


                    <td class="tdOnclick">
                        @item.Training.LocationDetails
                    </td>

                    <td class="tdOnclick">
                        @item.Training.Date
                    </td>

                    <td class="tdOnclick">
                        @item.LostPersonTrackLength
                    </td>

                    <td class="tdOnclick">
                        @item.DelayTime
                    </td>

                    @*buttons *@
                    <td style="background-color:white">
                        <button class="displayButton" onclick="location.href='@Url.Action("Training", "DogTrainings", new { dogId = @item.DogId, trainingId=@item.TrainingId  })'">wyświetl</button>

                        @*<button class="displayButton" onclick="location.href='@Url.Action("Training", "Trainings", new { id = @item.TrainingId })'">wyświetl</button>*@
                    </td>
                    @{ if (LoginHelper.IsCurrentUserAdmin() || LoginHelper.IsCurrentUserMember())
                        {
                            <td style="background-color:white">
                                <button class="deleteButton" onclick="deleteDogTraining(@item.DogId, @item.TrainingId)" id="@($"deleteDog{item.DogId}Training{item.TrainingId}Button")">usuń</button>
                            </td>
                            @*<td style="background-color:white">
                    <button class="updateButton" onclick="location.href='@Url.Action("UpdateTraining", "Trainings", new { id = @item.TrainingId })'">zmień</button>
                </td>*@
                        } }

                </tr>



                }

            </table>
    </div>
</div>
<script>
    function searchByTrainingLocalization() {
        var input, filter, table, tr, td, i;
        input = document.getElementById("dogTrainingsSearch");
        filter = input.value.toUpperCase();
        table = document.getElementById("dogTrainingsTable");
        tr = table.getElementsByTagName("tr");
        for (i = 0; i < tr.length; i++) {
             /* search by dog's name*/
            tdDogTrainingsName = tr[i].getElementsByTagName("td")[1];
            /* search by guide's  name*/
            //tdGuideName = tr[i].getElementsByTagName("td")[2];
            if (tdDogName) {
                if (tdDogTrainingsName.innerHTML.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
    @* location.href='@Url.Action("DeleteDog", "Dogs", new { id = @item.DogId })' *@

    function deleteDogTraining(dogId, trainingId) {
       // var id = dogId;
        alert("Delete dog: " + dogId);
        //document.getElementById("disp").innerHTML = "hi";
        $.ajax({
            url: "@Url.Action("DeleteDogTraining", "DogTrainings")",
            method: "POST", //First change type to method here

            data: {
                dogId: dogId, // Second add quotes on the value.
                trainingId: trainingId
            },
            success: function (response) {
                if (response) {
                    //var resp = jQuery.parseJSON(response);
                    var resp = response;
                    //console.log(resp);
                    if (resp.success) {
                        alert("udało się usunac psa o id: " + resp.dogId + "trening: " + resp.trainingId);
                        //usunięcie z tabeli tr ktory zawiera button o id deleteDogButton<id>
                        //var buttonId = "deleteDogButton" + dogId;
                        var button = $("#deleteDog" + resp.dogId + "Training" + resp.trainingId + "Button");

                    var tableRow = button.closest("tr");
                        //alert(button.text());
                        tableRow.remove();
                    }
                }
            },
            error: function () {
                alert("error");
            }

        });
    }

    function sortTable(n, isDate) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("dogTrainingsTable");
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (isDate == true) {
                        var date1 = new Date(x.innerHTML);
                        var date2 = new Date(y.innerHTML);
                        if (date1 < date2) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                    else if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
                else if (dir == "desc") {
                    if (isDate == true) {
                        var date1 = new Date(x.innerHTML);
                        var date2 = new Date(y.innerHTML);
                        if (date1 > date2) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                    else if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            }
            else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }

    //$(document).ready(function () {
    //    $('#dogsTable').on("click", "td.tdOnclick", function () {
    //        alert('ho ho ho');
    //    });
    //});
</script>

@*
    </div>

*@